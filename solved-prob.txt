1)

class Main
{
    public static void findPair(int[] A, int target)
    {
        for (int i = 0; i < A.length - 1; i++)
        {
            for (int j = i + 1; j < A.length; j++)
            {
                if (A[i] + A[j] == target)
                {
                    System.out.println("Pair found (" + A[i] + ", " + A[j] + ")");
                    return;
                }
            }
        }
        System.out.println("Pair not found");
    } 
    public static void main (String[] args)
    {
        int[] A = { 8, 7, 2, 5, 3, 1 };
        int target = 10; 
        findPair(A, target);
    }
}



2)



public class ReverseArray {  
    public static void main(String[] args) {  
        int [] arr = new int [] {1, 2, 3, 4, 5};  
        System.out.println("Original array: ");  
        for (int i = 0; i < arr.length; i++) {  
            System.out.print(arr[i] + " ");  
        }  
        System.out.println();  
        System.out.println("Array in reverse order: ");   
        for (int i = arr.length-1; i >= 0; i--) {  
            System.out.print(arr[i] + " ");  
        }  
    }  
}




3)


class StringRotation
{
	static boolean areRotations(String str1, String str2)
	{
		return (str1.length() == str2.length()) &&
			((str1 + str1).indexOf(str2) != -1);
	}
	
	public static void main (String[] args)
	{
		String str1 = "AACD";
		String str2 = "ACDA";

		if (areRotations(str1, str2))
			System.out.println("Strings are rotations of each other");
		else
			System.out.printf("Strings are not rotations of each other");
	}
}





4)



public class FirstNonRepeatedCharFirst {
    public static void main(String args[]) {
     
        String inputStr ="teeter";

        for(char i :inputStr.toCharArray()){
        if ( inputStr.indexOf(i) == inputStr.lastIndexOf(i)) {
            System.out.println("First non-repeating character is: "+i);
            break;
        }
        }
    }
}





5)




import java.util.*;
import java.io.*;
import java.math.*;
class GFG
{
static void towerOfHanoi(int n, char from_rod,
					char to_rod, char aux_rod)
{
	if (n == 1)
	{
		System.out.println("Move disk 1 from rod "+
						from_rod+" to rod "+to_rod);
		return;
	}
	towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);
	System.out.println("Move disk "+ n + " from rod " +
					from_rod +" to rod " + to_rod );
	towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);
}
public static void main(String args[])
{
	int n = 4;
	towerOfHanoi(n, 'A', 'C', 'B'); 
}
}


6)



import java.util.*;

class pp {
	static boolean isOperator(char x)
	{

		switch (x) {
		case '+':
		case '-':
		case '/':
		case '*':
			return true;
		}
		return false;
	}
	static String postToPre(String post_exp)
	{
		Stack<String> s = new Stack<String>();
		int length = post_exp.length();
		for (int i = 0; i < length; i++) {
			if (isOperator(post_exp.charAt(i))) {
				String op1 = s.peek();
				s.pop();
				String op2 = s.peek();
				s.pop();
				String temp
					= post_exp.charAt(i) + op2 + op1;
				s.push(temp);
			}
			else {
				s.push(post_exp.charAt(i) + "");
			}
		}
		String ans = "";
		for (String i : s)
			ans += i;
		return ans;
	}
	public static void main(String args[])
	{
		String post_exp = "ABC/-AK/L-*";
		System.out.println("Prefix : "
						+ postToPre(post_exp));
	}
}


7)


import java.util.Stack;

class IP{	
static boolean isOperator(char x)
{
	switch(x)
	{
		case '+':
		case '-':
		case '*':
		case '/':
			return true;
	}
	return false;
}
public static String convert(String str)
{
	Stack<String> stack = new Stack<>();
	int l = str.length();
	for(int i = l - 1; i >= 0; i--)
	{
		char c = str.charAt(i);
		if (isOperator(c))
		{
			String op1 = stack.pop();
			String op2 = stack.pop();
			String temp = "(" + op1 + c + op2 + ")";
			stack.push(temp);
		}
		else
		{
			stack.push(c + "");
		}
	}
	return stack.pop();
}
public static void main(String[] args)
{
	String exp = "*-A/BC-/AKL";
	System.out.println("Infix : " + convert(exp));
}
}



8)



import java.util.*;

public class bracketschk {
	static boolean areBracketsBalanced(String expr)
	{
		Deque<Character> stack
			= new ArrayDeque<Character>();
		for (int i = 0; i < expr.length(); i++)
		{
			char x = expr.charAt(i);

			if (x == '(' || x == '[' || x == '{')
			{
				stack.push(x);
				continue;
			}
			if (stack.isEmpty())
				return false;
			char check;
			switch (x) {
			case ')':
				check = stack.pop();
				if (check == '{' || check == '[')
					return false;
				break;

			case '}':
				check = stack.pop();
				if (check == '(' || check == '[')
					return false;
				break;

			case ']':
				check = stack.pop();
				if (check == '(' || check == '{')
					return false;
				break;
			}
		}
		return (stack.isEmpty());
	}
	public static void main(String[] args)
	{
		String expr = "([{}])";
		if (areBracketsBalanced(expr))
			System.out.println("Balanced ");
		else
			System.out.println("Not Balanced ");
	}
}



9)


import java.util.Stack;
class Test {
	static Stack<Character> st = new Stack<>();
	static void insert_at_bottom(char x)
	{
		if(st.isEmpty())
			st.push(x);

		else
		{
			char a = st.peek();
			st.pop();
			insert_at_bottom(x);
			st.push(a);
		}
	}
	static void reverse()
	{
		if(st.size() > 0)
		{
			char x = st.peek();
			st.pop();
			reverse();
			insert_at_bottom(x);
		}
	}
	public static void main(String[] args)
	{
		st.push('1');
		st.push('2');
		st.push('3');
		st.push('4');		
		System.out.println("Original Stack");		
		System.out.println(st);
		reverse();		
		System.out.println("Reversed Stack");		
		System.out.println(st);
	}
}



10)


import java.util.*;
class MyStack
{
	Stack<Integer> s;
	Integer minEle;
	MyStack() { s = new Stack<Integer>(); }
	void getMin()
	{
		if (s.isEmpty())
			System.out.println("Stack is empty");
		else
			System.out.println("Minimum Element in the " +
							" stack is: " + minEle);
	}
	void peek()
	{
		if (s.isEmpty())
		{
			System.out.println("Stack is empty ");
			return;
		}
		Integer t = s.peek();

		System.out.print("Top Most Element is: ");
		if (t < minEle)
			System.out.println(minEle);
		else
			System.out.println(t);
	}
	void pop()
	{
		if (s.isEmpty())
		{
			System.out.println("Stack is empty");
			return;
		}
		System.out.print("Top Most Element Removed: ");
		Integer t = s.pop();
		if (t < minEle)
		{
			System.out.println(minEle);
			minEle = 2*minEle - t;
		}

		else
			System.out.println(t);
	}
	void push(Integer x)
	{
		if (s.isEmpty())
		{
			minEle = x;
			s.push(x);
			System.out.println("Number Inserted: " + x);
			return;
		}
		if (x < minEle)
		{
			s.push(2*x - minEle);
			minEle = x;
		}
		else
			s.push(x);
		System.out.println("Number Inserted: " + x);
	}
};
public class Main
{
	public static void main(String[] args)
	{
		MyStack s = new MyStack();
		s.push(3);
		s.push(5);
		s.getMin();
		s.push(2);
		s.push(1);
		s.getMin();
		s.pop();
		s.getMin();
		s.pop();
		s.peek();
	}
}



